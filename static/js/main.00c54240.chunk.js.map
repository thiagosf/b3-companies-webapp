{"version":3,"sources":["store/reducers/company.js","store/reducers/index.js","store/index.js","components/organisms/Companies.js","utils/api.js","utils/number.js","components/pages/Home.js","routes/index.js","store/actions/company.js","index.js"],"names":["initialState","list","sending","combineReducers","company","state","action","nextState","type","identifier","data","store","createStore","rootReducer","compose","applyMiddleware","thunk","Companies","this","props","responsive","striped","bordered","small","Component","api","getURL","buildURL","path","post","token","request","put","get","params","delete","buildHeaders","headers","Object","assign","method","instance","axios","create","baseURL","config","url","then","response","catch","error","formatPercentage","value","signal","variation","toFixed","Home","_getData","rows","forEach","item","aggregate","b3link","target","rel","href","code","fundamentuslink","tradingview","price","updated","dayVariation","pL","quote","current","open","number","Date","toLocaleString","fundamentus","indicators","p_l","activity","className","push","name","day_variation","showEntries","columns","label","field","sort","loadCompanies","Container","fluid","routes","component","connect","dispatch","result","success","render","basename","process","map","route","exact","key","document","getElementById"],"mappings":"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","file":"static/js/main.00c54240.chunk.js","sourcesContent":["const initialState = {\n  list: [],\n  sending: false\n}\n\nconst identifier = 'company'\n\nexport default (state = initialState, action) => {\n  let nextState = { ...state }\n\n  switch (action.type) {\n    case 'BEFORE_SEND':\n      if (action.identifier === identifier) {\n        nextState.sending = true\n      }\n      break\n\n    case 'AFTER_RESPONSE':\n      if (action.identifier === identifier) {\n        nextState.sending = false\n      }\n      break\n\n    case 'SET_COMPANIES':\n      nextState.list = action.data\n      break\n\n    default:\n      nextState = state\n      break\n  }\n\n  return nextState\n}\n","import { combineReducers } from 'redux'\nimport company from './company'\n\nexport default combineReducers({\n  company\n})\n","import { applyMiddleware, createStore, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst store = createStore(\n  rootReducer,\n  compose(applyMiddleware(thunk))\n)\n\nexport default store\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { MDBDataTable } from 'mdbreact';\n\nclass Companies extends Component {\n  static propTypes = {\n    data: PropTypes.object.isRequired\n  };\n\n  render () {\n    const { data } = this.props\n    return (\n      <MDBDataTable\n        responsive\n        striped\n        bordered\n        small\n        data={data}\n      />\n    )\n  };\n}\n\nexport default Companies\n","import axios from 'axios'\n\n/**\n * Utilidades para API\n */\nconst api = {\n  /**\n   * Retorna url da api\n   * @returns {string}\n   */\n  getURL () {\n    let url\n    if (\n      process.env.NODE_ENV === 'dev' ||\n      process.env.NODE_ENV === 'development' ||\n      process.env.NODE_ENV === 'test'\n    ) {\n      url = 'http://localhost:4000/'\n    } else {\n      url = 'https://api.b3-companies.thiagosf.net/'\n    }\n    return url\n  },\n\n  /**\n   * Monta url\n   * @param {string} path\n   * @returns {string}\n   */\n  buildURL (path) {\n    return this.getURL() + path\n  },\n\n  /**\n   * Post\n   * @param {string} path\n   * @param {object} [data={}]\n   * @param {string} [token=null]\n   * @returns {Promise}\n   */\n  post (path, data = {}, token = null) {\n    return this.request('post', path, data, token)\n  },\n\n  /**\n   * Put\n   * @param {string} path\n   * @param {object} [data={}]\n   * @param {string} [token=null]\n   * @returns {Promise}\n   */\n  put (path, data = {}, token = null) {\n    return this.request('put', path, data, token)\n  },\n\n  /**\n   * Get\n   * @param {string} path\n   * @param {object} [params={}]\n   * @param {string} [token=null]\n   * @returns {Promise}\n   */\n  get (path, params = {}, token = null) {\n    return this.request('get', path, params, token)\n  },\n\n  /**\n   * Post\n   * @param {string} path\n   * @param {object} [data={}]\n   * @param {string} [token=null]\n   * @returns {Promise}\n   */\n  delete (path, data = {}, token = null) {\n    return this.request('delete', path, data, token)\n  },\n\n  /**\n   * Retorna headers\n   * @param {object} [data={}]\n   * @param {string} [token=null]\n   * @returns {object}\n   */\n  buildHeaders (data = {}, token = null) {\n    let headers = {}\n    if (data.headers) {\n      headers = Object.assign({}, data.headers)\n    }\n    if (token) {\n      headers['Authorization'] = `Token ${token}`\n    }\n    return headers\n  },\n\n  /**\n   * Faz request\n   * @param {string} method\n   * @param {string} path\n   * @param {object} [data={}]\n   * @param {object} [token=null]\n   * @returns {Promise}\n   */\n  request (method, path, data = {}, token = null) {\n    const headers = this.buildHeaders(data, token)\n    const instance = axios.create({\n      baseURL: this.getURL(),\n      headers\n    })\n    let config = {\n      url: path,\n      method,\n    }\n    if (method === 'get') {\n      config.params = data || {}\n    } else {\n      config.data = data || {}\n    }\n    return instance.request(config)\n      .then(response => response.data)\n      .catch(error => {\n        if (error.response && error.response.data) {\n          return error.response.data\n        }\n        throw error\n      })\n  }\n}\n\nexport default api\n","export default {\n  formatPercentage (value, signal = true) {\n    let variation = +((+value).toFixed(2))\n    if (signal) {\n      variation = `${variation}%`\n    }\n    return variation\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Container from 'react-bootstrap/Container'\nimport { Companies } from '../organisms'\nimport { loadCompanies } from '../../store/actions/company'\nimport { number } from '../../utils'\n\nclass Home extends Component {\n  componentDidMount () {\n    this.props.loadCompanies()\n  };\n\n  render () {\n    const data = this._getData()\n    return (\n      <Container fluid>\n        <div className=\"home\">\n          <h1>Empresas B3</h1>\n          <Companies\n            data={data}\n          />\n        </div>\n      </Container>\n    )\n  };\n\n  _getData = () => {\n    const { list } = this.props.company\n    let rows = []\n    list.forEach(item => {\n      if (item.aggregate) {\n        item.aggregate.forEach(aggregate => {\n          const b3link = (\n            <a\n              target='_blank'\n              rel='noopener noreferrer'\n              href={`http://bvmf.bmfbovespa.com.br/cias-listadas/empresas-listadas/ResumoEmpresaPrincipal.aspx?codigoCvm=${item.code}&idioma=pt-br`}\n            >\n              view\n            </a>\n          )\n          const fundamentuslink = (\n            <a\n              target='_blank'\n              rel='noopener noreferrer'\n              href={`https://www.fundamentus.com.br/detalhes.php?papel=${aggregate.code}`}\n            >\n              view\n            </a>\n          )\n          const tradingview = (\n            <a\n              target='_blank'\n              rel='noopener noreferrer'\n              href={`https://br.tradingview.com/chart/?symbol=BMFBOVESPA:${aggregate.code}`}\n            >\n              view\n            </a>\n          )\n          let price = 0\n          let updated = null\n          let dayVariation = 0\n          let variation = 0\n          let pL = 0\n          if (aggregate.quote) {\n            if (aggregate.quote.current) {\n              price = +aggregate.quote.current\n              dayVariation = ((+aggregate.quote.current / +aggregate.quote.open) - 1) * 100\n              dayVariation = number.formatPercentage(dayVariation, false)\n              updated = new Date(+aggregate.quote.updated)\n              updated = updated.toLocaleString()\n            }\n            variation = number.formatPercentage(aggregate.quote.variation, false)\n          }\n          if (\n            aggregate.fundamentus &&\n            aggregate.fundamentus.indicators\n          ) {\n            pL = +aggregate.fundamentus.indicators.p_l\n          }\n          const activity = (\n            <div className=\"company-activity\">\n              {item.activity}\n            </div>\n          )\n          rows.push({\n            company: item.name,\n            activity,\n            code: aggregate.code,\n            price,\n            day_variation: dayVariation,\n            variation,\n            p_l: pL,\n            updated,\n            b3link,\n            fundamentuslink,\n            tradingview\n          })\n        })\n      }\n    })\n    return {\n      showEntries: 1,\n      columns: [{\n        label: 'Empresa',\n        field: 'company',\n        sort: 'asc'\n      }, {\n        label: 'Atividade',\n        field: 'activity',\n        sort: 'asc'\n      }, {\n        label: 'Símbolo',\n        field: 'code',\n        sort: 'asc'\n      }, {\n        label: 'Preço atual',\n        field: 'price',\n        sort: 'asc'\n      }, {\n        label: 'Variação dia',\n        field: 'day_variation',\n        sort: 'asc'\n      }, {\n        label: 'Variação fech. ant.',\n        field: 'variation',\n        sort: 'asc'\n      }, {\n        label: 'P/L',\n        field: 'p_l',\n        sort: 'asc'\n      }, {\n        label: 'Atualização',\n        field: 'updated',\n        sort: 'asc'\n      }, {\n        label: 'B3',\n        field: 'b3link',\n        sort: 'asc'\n      }, {\n        label: 'Fundamentus',\n        field: 'fundamentuslink',\n        sort: 'asc'\n      }, {\n        label: 'TradingView',\n        field: 'tradingview',\n        sort: 'asc'\n      }],\n      rows\n    }\n  };\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    company: state.company\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    loadCompanies: () => dispatch(loadCompanies())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\n","import {\n  Home\n} from '../components/pages'\n\nexport default {\n  routes: [{\n    name: 'home',\n    path: '/',\n    component: Home\n  }]\n}\n","import { api } from '../../utils'\n\nexport const loadCompanies = () => {\n  return dispatch => {\n    api.get('companies').then(result => {\n      let data = []\n      if (result.success) {\n        data = result.data\n      }\n      dispatch({\n        type: 'SET_COMPANIES',\n        data\n      })\n    })\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { HashRouter, BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { CookiesProvider } from 'react-cookie'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport './styles/styles.css'\nimport store from './store'\nimport routes from './routes'\n\nrender(\n  <Provider store={store}>\n    <CookiesProvider>\n      <HashRouter basename={process.env.PUBLIC_URL}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Switch>\n            {routes.routes.map(route => (\n              <Route\n                exact={true}\n                key={route.name}\n                path={route.path}\n                component={route.component}\n                />\n            ))}\n          </Switch>\n        </BrowserRouter>\n      </HashRouter>\n    </CookiesProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}